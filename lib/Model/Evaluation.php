<?php
/**
 * Evaluation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Speech Services API v3.1
 *
 * Speech Services API v3.1.
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Evaluation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Evaluation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Evaluation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'model1' => '\Swagger\Client\Model\EntityReference',
        'model2' => '\Swagger\Client\Model\EntityReference',
        'transcription1' => '\Swagger\Client\Model\EntityReference',
        'transcription2' => '\Swagger\Client\Model\EntityReference',
        'dataset' => '\Swagger\Client\Model\EntityReference',
        'links' => '\Swagger\Client\Model\EvaluationLinks',
        'properties' => '\Swagger\Client\Model\EvaluationProperties',
        'project' => '\Swagger\Client\Model\EntityReference',
        'self' => 'string',
        'last_action_date_time' => '\DateTime',
        'status' => '\Swagger\Client\Model\Status',
        'created_date_time' => '\DateTime',
        'display_name' => 'string',
        'description' => 'string',
        'custom_properties' => 'map[string,string]',
        'locale' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'model1' => null,
        'model2' => null,
        'transcription1' => null,
        'transcription2' => null,
        'dataset' => null,
        'links' => null,
        'properties' => null,
        'project' => null,
        'self' => 'uri',
        'last_action_date_time' => 'date-time',
        'status' => null,
        'created_date_time' => 'date-time',
        'display_name' => null,
        'description' => null,
        'custom_properties' => null,
        'locale' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'model1' => 'model1',
        'model2' => 'model2',
        'transcription1' => 'transcription1',
        'transcription2' => 'transcription2',
        'dataset' => 'dataset',
        'links' => 'links',
        'properties' => 'properties',
        'project' => 'project',
        'self' => 'self',
        'last_action_date_time' => 'lastActionDateTime',
        'status' => 'status',
        'created_date_time' => 'createdDateTime',
        'display_name' => 'displayName',
        'description' => 'description',
        'custom_properties' => 'customProperties',
        'locale' => 'locale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'model1' => 'setModel1',
        'model2' => 'setModel2',
        'transcription1' => 'setTranscription1',
        'transcription2' => 'setTranscription2',
        'dataset' => 'setDataset',
        'links' => 'setLinks',
        'properties' => 'setProperties',
        'project' => 'setProject',
        'self' => 'setSelf',
        'last_action_date_time' => 'setLastActionDateTime',
        'status' => 'setStatus',
        'created_date_time' => 'setCreatedDateTime',
        'display_name' => 'setDisplayName',
        'description' => 'setDescription',
        'custom_properties' => 'setCustomProperties',
        'locale' => 'setLocale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'model1' => 'getModel1',
        'model2' => 'getModel2',
        'transcription1' => 'getTranscription1',
        'transcription2' => 'getTranscription2',
        'dataset' => 'getDataset',
        'links' => 'getLinks',
        'properties' => 'getProperties',
        'project' => 'getProject',
        'self' => 'getSelf',
        'last_action_date_time' => 'getLastActionDateTime',
        'status' => 'getStatus',
        'created_date_time' => 'getCreatedDateTime',
        'display_name' => 'getDisplayName',
        'description' => 'getDescription',
        'custom_properties' => 'getCustomProperties',
        'locale' => 'getLocale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['model1'] = isset($data['model1']) ? $data['model1'] : null;
        $this->container['model2'] = isset($data['model2']) ? $data['model2'] : null;
        $this->container['transcription1'] = isset($data['transcription1']) ? $data['transcription1'] : null;
        $this->container['transcription2'] = isset($data['transcription2']) ? $data['transcription2'] : null;
        $this->container['dataset'] = isset($data['dataset']) ? $data['dataset'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
        $this->container['last_action_date_time'] = isset($data['last_action_date_time']) ? $data['last_action_date_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['custom_properties'] = isset($data['custom_properties']) ? $data['custom_properties'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['model1'] === null) {
            $invalidProperties[] = "'model1' can't be null";
        }
        if ($this->container['model2'] === null) {
            $invalidProperties[] = "'model2' can't be null";
        }
        if ($this->container['dataset'] === null) {
            $invalidProperties[] = "'dataset' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ((mb_strlen($this->container['display_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        if ((mb_strlen($this->container['locale']) < 1)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets model1
     *
     * @return \Swagger\Client\Model\EntityReference
     */
    public function getModel1()
    {
        return $this->container['model1'];
    }

    /**
     * Sets model1
     *
     * @param \Swagger\Client\Model\EntityReference $model1 model1
     *
     * @return $this
     */
    public function setModel1($model1)
    {
        $this->container['model1'] = $model1;

        return $this;
    }

    /**
     * Gets model2
     *
     * @return \Swagger\Client\Model\EntityReference
     */
    public function getModel2()
    {
        return $this->container['model2'];
    }

    /**
     * Sets model2
     *
     * @param \Swagger\Client\Model\EntityReference $model2 model2
     *
     * @return $this
     */
    public function setModel2($model2)
    {
        $this->container['model2'] = $model2;

        return $this;
    }

    /**
     * Gets transcription1
     *
     * @return \Swagger\Client\Model\EntityReference
     */
    public function getTranscription1()
    {
        return $this->container['transcription1'];
    }

    /**
     * Sets transcription1
     *
     * @param \Swagger\Client\Model\EntityReference $transcription1 transcription1
     *
     * @return $this
     */
    public function setTranscription1($transcription1)
    {
        $this->container['transcription1'] = $transcription1;

        return $this;
    }

    /**
     * Gets transcription2
     *
     * @return \Swagger\Client\Model\EntityReference
     */
    public function getTranscription2()
    {
        return $this->container['transcription2'];
    }

    /**
     * Sets transcription2
     *
     * @param \Swagger\Client\Model\EntityReference $transcription2 transcription2
     *
     * @return $this
     */
    public function setTranscription2($transcription2)
    {
        $this->container['transcription2'] = $transcription2;

        return $this;
    }

    /**
     * Gets dataset
     *
     * @return \Swagger\Client\Model\EntityReference
     */
    public function getDataset()
    {
        return $this->container['dataset'];
    }

    /**
     * Sets dataset
     *
     * @param \Swagger\Client\Model\EntityReference $dataset dataset
     *
     * @return $this
     */
    public function setDataset($dataset)
    {
        $this->container['dataset'] = $dataset;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\EvaluationLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\EvaluationLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \Swagger\Client\Model\EvaluationProperties
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \Swagger\Client\Model\EvaluationProperties $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\EntityReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\EntityReference $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string $self The location of this entity.
     *
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets last_action_date_time
     *
     * @return \DateTime
     */
    public function getLastActionDateTime()
    {
        return $this->container['last_action_date_time'];
    }

    /**
     * Sets last_action_date_time
     *
     * @param \DateTime $last_action_date_time The time-stamp when the current status was entered.  The time stamp is encoded as ISO 8601 date and time format  (\"YYYY-MM-DDThh:mm:ssZ\", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
     *
     * @return $this
     */
    public function setLastActionDateTime($last_action_date_time)
    {
        $this->container['last_action_date_time'] = $last_action_date_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\Status
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\Status $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime $created_date_time The time-stamp when the object was created.  The time stamp is encoded as ISO 8601 date and time format  (\"YYYY-MM-DDThh:mm:ssZ\", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The display name of the object.
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {

        if ((mb_strlen($display_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling Evaluation., must be bigger than or equal to 1.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the object.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets custom_properties
     *
     * @return map[string,string]
     */
    public function getCustomProperties()
    {
        return $this->container['custom_properties'];
    }

    /**
     * Sets custom_properties
     *
     * @param map[string,string] $custom_properties The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum  allowed value length is 256 characters and the count of allowed entries is 10.
     *
     * @return $this
     */
    public function setCustomProperties($custom_properties)
    {
        $this->container['custom_properties'] = $custom_properties;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale The locale of the contained data.
     *
     * @return $this
     */
    public function setLocale($locale)
    {

        if ((mb_strlen($locale) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling Evaluation., must be bigger than or equal to 1.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


