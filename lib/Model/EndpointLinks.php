<?php
/**
 * EndpointLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Speech Services API v3.1
 *
 * Speech Services API v3.1.
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EndpointLinks Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EndpointLinks implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EndpointLinks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rest_interactive' => 'string',
        'rest_conversation' => 'string',
        'rest_dictation' => 'string',
        'web_socket_interactive' => 'string',
        'web_socket_conversation' => 'string',
        'web_socket_dictation' => 'string',
        'logs' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rest_interactive' => 'uri',
        'rest_conversation' => 'uri',
        'rest_dictation' => 'uri',
        'web_socket_interactive' => 'uri',
        'web_socket_conversation' => 'uri',
        'web_socket_dictation' => 'uri',
        'logs' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rest_interactive' => 'restInteractive',
        'rest_conversation' => 'restConversation',
        'rest_dictation' => 'restDictation',
        'web_socket_interactive' => 'webSocketInteractive',
        'web_socket_conversation' => 'webSocketConversation',
        'web_socket_dictation' => 'webSocketDictation',
        'logs' => 'logs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rest_interactive' => 'setRestInteractive',
        'rest_conversation' => 'setRestConversation',
        'rest_dictation' => 'setRestDictation',
        'web_socket_interactive' => 'setWebSocketInteractive',
        'web_socket_conversation' => 'setWebSocketConversation',
        'web_socket_dictation' => 'setWebSocketDictation',
        'logs' => 'setLogs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rest_interactive' => 'getRestInteractive',
        'rest_conversation' => 'getRestConversation',
        'rest_dictation' => 'getRestDictation',
        'web_socket_interactive' => 'getWebSocketInteractive',
        'web_socket_conversation' => 'getWebSocketConversation',
        'web_socket_dictation' => 'getWebSocketDictation',
        'logs' => 'getLogs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rest_interactive'] = isset($data['rest_interactive']) ? $data['rest_interactive'] : null;
        $this->container['rest_conversation'] = isset($data['rest_conversation']) ? $data['rest_conversation'] : null;
        $this->container['rest_dictation'] = isset($data['rest_dictation']) ? $data['rest_dictation'] : null;
        $this->container['web_socket_interactive'] = isset($data['web_socket_interactive']) ? $data['web_socket_interactive'] : null;
        $this->container['web_socket_conversation'] = isset($data['web_socket_conversation']) ? $data['web_socket_conversation'] : null;
        $this->container['web_socket_dictation'] = isset($data['web_socket_dictation']) ? $data['web_socket_dictation'] : null;
        $this->container['logs'] = isset($data['logs']) ? $data['logs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rest_interactive
     *
     * @return string
     */
    public function getRestInteractive()
    {
        return $this->container['rest_interactive'];
    }

    /**
     * Sets rest_interactive
     *
     * @param string $rest_interactive The REST endpoint for short requests up to 15 seconds.
     *
     * @return $this
     */
    public function setRestInteractive($rest_interactive)
    {
        $this->container['rest_interactive'] = $rest_interactive;

        return $this;
    }

    /**
     * Gets rest_conversation
     *
     * @return string
     */
    public function getRestConversation()
    {
        return $this->container['rest_conversation'];
    }

    /**
     * Sets rest_conversation
     *
     * @param string $rest_conversation The REST endpoint for requests up to 60 seconds.
     *
     * @return $this
     */
    public function setRestConversation($rest_conversation)
    {
        $this->container['rest_conversation'] = $rest_conversation;

        return $this;
    }

    /**
     * Gets rest_dictation
     *
     * @return string
     */
    public function getRestDictation()
    {
        return $this->container['rest_dictation'];
    }

    /**
     * Sets rest_dictation
     *
     * @param string $rest_dictation The REST endpoint for requests up to 60 seconds, supporting dictation of punctuation marks.
     *
     * @return $this
     */
    public function setRestDictation($rest_dictation)
    {
        $this->container['rest_dictation'] = $rest_dictation;

        return $this;
    }

    /**
     * Gets web_socket_interactive
     *
     * @return string
     */
    public function getWebSocketInteractive()
    {
        return $this->container['web_socket_interactive'];
    }

    /**
     * Sets web_socket_interactive
     *
     * @param string $web_socket_interactive The Speech SDK endpoint for short requests up to 15 seconds with a single final result.
     *
     * @return $this
     */
    public function setWebSocketInteractive($web_socket_interactive)
    {
        $this->container['web_socket_interactive'] = $web_socket_interactive;

        return $this;
    }

    /**
     * Gets web_socket_conversation
     *
     * @return string
     */
    public function getWebSocketConversation()
    {
        return $this->container['web_socket_conversation'];
    }

    /**
     * Sets web_socket_conversation
     *
     * @param string $web_socket_conversation The Speech SDK endpoint for long requests with multiple final results.
     *
     * @return $this
     */
    public function setWebSocketConversation($web_socket_conversation)
    {
        $this->container['web_socket_conversation'] = $web_socket_conversation;

        return $this;
    }

    /**
     * Gets web_socket_dictation
     *
     * @return string
     */
    public function getWebSocketDictation()
    {
        return $this->container['web_socket_dictation'];
    }

    /**
     * Sets web_socket_dictation
     *
     * @param string $web_socket_dictation The Speech SDK endpoint for long requests with multiple final results, supporting dictation of  punctuation marks.
     *
     * @return $this
     */
    public function setWebSocketDictation($web_socket_dictation)
    {
        $this->container['web_socket_dictation'] = $web_socket_dictation;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return string
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param string $logs The audio and transcription logs for this endpoint.  See operation \"Endpoints_ListLogs\" for more details.
     *
     * @return $this
     */
    public function setLogs($logs)
    {
        $this->container['logs'] = $logs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


