<?php
/**
 * WebHookEvents
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Speech Services API v3.1
 *
 * Speech Services API v3.1.
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WebHookEvents Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebHookEvents implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebHookEvents';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dataset_creation' => 'bool',
        'dataset_processing' => 'bool',
        'dataset_completion' => 'bool',
        'dataset_deletion' => 'bool',
        'model_creation' => 'bool',
        'model_processing' => 'bool',
        'model_completion' => 'bool',
        'model_deletion' => 'bool',
        'evaluation_creation' => 'bool',
        'evaluation_processing' => 'bool',
        'evaluation_completion' => 'bool',
        'evaluation_deletion' => 'bool',
        'transcription_creation' => 'bool',
        'transcription_processing' => 'bool',
        'transcription_completion' => 'bool',
        'transcription_deletion' => 'bool',
        'endpoint_creation' => 'bool',
        'endpoint_processing' => 'bool',
        'endpoint_completion' => 'bool',
        'endpoint_deletion' => 'bool',
        'ping' => 'bool',
        'challenge' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dataset_creation' => null,
        'dataset_processing' => null,
        'dataset_completion' => null,
        'dataset_deletion' => null,
        'model_creation' => null,
        'model_processing' => null,
        'model_completion' => null,
        'model_deletion' => null,
        'evaluation_creation' => null,
        'evaluation_processing' => null,
        'evaluation_completion' => null,
        'evaluation_deletion' => null,
        'transcription_creation' => null,
        'transcription_processing' => null,
        'transcription_completion' => null,
        'transcription_deletion' => null,
        'endpoint_creation' => null,
        'endpoint_processing' => null,
        'endpoint_completion' => null,
        'endpoint_deletion' => null,
        'ping' => null,
        'challenge' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dataset_creation' => 'datasetCreation',
        'dataset_processing' => 'datasetProcessing',
        'dataset_completion' => 'datasetCompletion',
        'dataset_deletion' => 'datasetDeletion',
        'model_creation' => 'modelCreation',
        'model_processing' => 'modelProcessing',
        'model_completion' => 'modelCompletion',
        'model_deletion' => 'modelDeletion',
        'evaluation_creation' => 'evaluationCreation',
        'evaluation_processing' => 'evaluationProcessing',
        'evaluation_completion' => 'evaluationCompletion',
        'evaluation_deletion' => 'evaluationDeletion',
        'transcription_creation' => 'transcriptionCreation',
        'transcription_processing' => 'transcriptionProcessing',
        'transcription_completion' => 'transcriptionCompletion',
        'transcription_deletion' => 'transcriptionDeletion',
        'endpoint_creation' => 'endpointCreation',
        'endpoint_processing' => 'endpointProcessing',
        'endpoint_completion' => 'endpointCompletion',
        'endpoint_deletion' => 'endpointDeletion',
        'ping' => 'ping',
        'challenge' => 'challenge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dataset_creation' => 'setDatasetCreation',
        'dataset_processing' => 'setDatasetProcessing',
        'dataset_completion' => 'setDatasetCompletion',
        'dataset_deletion' => 'setDatasetDeletion',
        'model_creation' => 'setModelCreation',
        'model_processing' => 'setModelProcessing',
        'model_completion' => 'setModelCompletion',
        'model_deletion' => 'setModelDeletion',
        'evaluation_creation' => 'setEvaluationCreation',
        'evaluation_processing' => 'setEvaluationProcessing',
        'evaluation_completion' => 'setEvaluationCompletion',
        'evaluation_deletion' => 'setEvaluationDeletion',
        'transcription_creation' => 'setTranscriptionCreation',
        'transcription_processing' => 'setTranscriptionProcessing',
        'transcription_completion' => 'setTranscriptionCompletion',
        'transcription_deletion' => 'setTranscriptionDeletion',
        'endpoint_creation' => 'setEndpointCreation',
        'endpoint_processing' => 'setEndpointProcessing',
        'endpoint_completion' => 'setEndpointCompletion',
        'endpoint_deletion' => 'setEndpointDeletion',
        'ping' => 'setPing',
        'challenge' => 'setChallenge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dataset_creation' => 'getDatasetCreation',
        'dataset_processing' => 'getDatasetProcessing',
        'dataset_completion' => 'getDatasetCompletion',
        'dataset_deletion' => 'getDatasetDeletion',
        'model_creation' => 'getModelCreation',
        'model_processing' => 'getModelProcessing',
        'model_completion' => 'getModelCompletion',
        'model_deletion' => 'getModelDeletion',
        'evaluation_creation' => 'getEvaluationCreation',
        'evaluation_processing' => 'getEvaluationProcessing',
        'evaluation_completion' => 'getEvaluationCompletion',
        'evaluation_deletion' => 'getEvaluationDeletion',
        'transcription_creation' => 'getTranscriptionCreation',
        'transcription_processing' => 'getTranscriptionProcessing',
        'transcription_completion' => 'getTranscriptionCompletion',
        'transcription_deletion' => 'getTranscriptionDeletion',
        'endpoint_creation' => 'getEndpointCreation',
        'endpoint_processing' => 'getEndpointProcessing',
        'endpoint_completion' => 'getEndpointCompletion',
        'endpoint_deletion' => 'getEndpointDeletion',
        'ping' => 'getPing',
        'challenge' => 'getChallenge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dataset_creation'] = isset($data['dataset_creation']) ? $data['dataset_creation'] : null;
        $this->container['dataset_processing'] = isset($data['dataset_processing']) ? $data['dataset_processing'] : null;
        $this->container['dataset_completion'] = isset($data['dataset_completion']) ? $data['dataset_completion'] : null;
        $this->container['dataset_deletion'] = isset($data['dataset_deletion']) ? $data['dataset_deletion'] : null;
        $this->container['model_creation'] = isset($data['model_creation']) ? $data['model_creation'] : null;
        $this->container['model_processing'] = isset($data['model_processing']) ? $data['model_processing'] : null;
        $this->container['model_completion'] = isset($data['model_completion']) ? $data['model_completion'] : null;
        $this->container['model_deletion'] = isset($data['model_deletion']) ? $data['model_deletion'] : null;
        $this->container['evaluation_creation'] = isset($data['evaluation_creation']) ? $data['evaluation_creation'] : null;
        $this->container['evaluation_processing'] = isset($data['evaluation_processing']) ? $data['evaluation_processing'] : null;
        $this->container['evaluation_completion'] = isset($data['evaluation_completion']) ? $data['evaluation_completion'] : null;
        $this->container['evaluation_deletion'] = isset($data['evaluation_deletion']) ? $data['evaluation_deletion'] : null;
        $this->container['transcription_creation'] = isset($data['transcription_creation']) ? $data['transcription_creation'] : null;
        $this->container['transcription_processing'] = isset($data['transcription_processing']) ? $data['transcription_processing'] : null;
        $this->container['transcription_completion'] = isset($data['transcription_completion']) ? $data['transcription_completion'] : null;
        $this->container['transcription_deletion'] = isset($data['transcription_deletion']) ? $data['transcription_deletion'] : null;
        $this->container['endpoint_creation'] = isset($data['endpoint_creation']) ? $data['endpoint_creation'] : null;
        $this->container['endpoint_processing'] = isset($data['endpoint_processing']) ? $data['endpoint_processing'] : null;
        $this->container['endpoint_completion'] = isset($data['endpoint_completion']) ? $data['endpoint_completion'] : null;
        $this->container['endpoint_deletion'] = isset($data['endpoint_deletion']) ? $data['endpoint_deletion'] : null;
        $this->container['ping'] = isset($data['ping']) ? $data['ping'] : null;
        $this->container['challenge'] = isset($data['challenge']) ? $data['challenge'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dataset_creation
     *
     * @return bool
     */
    public function getDatasetCreation()
    {
        return $this->container['dataset_creation'];
    }

    /**
     * Sets dataset_creation
     *
     * @param bool $dataset_creation dataset_creation
     *
     * @return $this
     */
    public function setDatasetCreation($dataset_creation)
    {
        $this->container['dataset_creation'] = $dataset_creation;

        return $this;
    }

    /**
     * Gets dataset_processing
     *
     * @return bool
     */
    public function getDatasetProcessing()
    {
        return $this->container['dataset_processing'];
    }

    /**
     * Sets dataset_processing
     *
     * @param bool $dataset_processing dataset_processing
     *
     * @return $this
     */
    public function setDatasetProcessing($dataset_processing)
    {
        $this->container['dataset_processing'] = $dataset_processing;

        return $this;
    }

    /**
     * Gets dataset_completion
     *
     * @return bool
     */
    public function getDatasetCompletion()
    {
        return $this->container['dataset_completion'];
    }

    /**
     * Sets dataset_completion
     *
     * @param bool $dataset_completion dataset_completion
     *
     * @return $this
     */
    public function setDatasetCompletion($dataset_completion)
    {
        $this->container['dataset_completion'] = $dataset_completion;

        return $this;
    }

    /**
     * Gets dataset_deletion
     *
     * @return bool
     */
    public function getDatasetDeletion()
    {
        return $this->container['dataset_deletion'];
    }

    /**
     * Sets dataset_deletion
     *
     * @param bool $dataset_deletion dataset_deletion
     *
     * @return $this
     */
    public function setDatasetDeletion($dataset_deletion)
    {
        $this->container['dataset_deletion'] = $dataset_deletion;

        return $this;
    }

    /**
     * Gets model_creation
     *
     * @return bool
     */
    public function getModelCreation()
    {
        return $this->container['model_creation'];
    }

    /**
     * Sets model_creation
     *
     * @param bool $model_creation model_creation
     *
     * @return $this
     */
    public function setModelCreation($model_creation)
    {
        $this->container['model_creation'] = $model_creation;

        return $this;
    }

    /**
     * Gets model_processing
     *
     * @return bool
     */
    public function getModelProcessing()
    {
        return $this->container['model_processing'];
    }

    /**
     * Sets model_processing
     *
     * @param bool $model_processing model_processing
     *
     * @return $this
     */
    public function setModelProcessing($model_processing)
    {
        $this->container['model_processing'] = $model_processing;

        return $this;
    }

    /**
     * Gets model_completion
     *
     * @return bool
     */
    public function getModelCompletion()
    {
        return $this->container['model_completion'];
    }

    /**
     * Sets model_completion
     *
     * @param bool $model_completion model_completion
     *
     * @return $this
     */
    public function setModelCompletion($model_completion)
    {
        $this->container['model_completion'] = $model_completion;

        return $this;
    }

    /**
     * Gets model_deletion
     *
     * @return bool
     */
    public function getModelDeletion()
    {
        return $this->container['model_deletion'];
    }

    /**
     * Sets model_deletion
     *
     * @param bool $model_deletion model_deletion
     *
     * @return $this
     */
    public function setModelDeletion($model_deletion)
    {
        $this->container['model_deletion'] = $model_deletion;

        return $this;
    }

    /**
     * Gets evaluation_creation
     *
     * @return bool
     */
    public function getEvaluationCreation()
    {
        return $this->container['evaluation_creation'];
    }

    /**
     * Sets evaluation_creation
     *
     * @param bool $evaluation_creation evaluation_creation
     *
     * @return $this
     */
    public function setEvaluationCreation($evaluation_creation)
    {
        $this->container['evaluation_creation'] = $evaluation_creation;

        return $this;
    }

    /**
     * Gets evaluation_processing
     *
     * @return bool
     */
    public function getEvaluationProcessing()
    {
        return $this->container['evaluation_processing'];
    }

    /**
     * Sets evaluation_processing
     *
     * @param bool $evaluation_processing evaluation_processing
     *
     * @return $this
     */
    public function setEvaluationProcessing($evaluation_processing)
    {
        $this->container['evaluation_processing'] = $evaluation_processing;

        return $this;
    }

    /**
     * Gets evaluation_completion
     *
     * @return bool
     */
    public function getEvaluationCompletion()
    {
        return $this->container['evaluation_completion'];
    }

    /**
     * Sets evaluation_completion
     *
     * @param bool $evaluation_completion evaluation_completion
     *
     * @return $this
     */
    public function setEvaluationCompletion($evaluation_completion)
    {
        $this->container['evaluation_completion'] = $evaluation_completion;

        return $this;
    }

    /**
     * Gets evaluation_deletion
     *
     * @return bool
     */
    public function getEvaluationDeletion()
    {
        return $this->container['evaluation_deletion'];
    }

    /**
     * Sets evaluation_deletion
     *
     * @param bool $evaluation_deletion evaluation_deletion
     *
     * @return $this
     */
    public function setEvaluationDeletion($evaluation_deletion)
    {
        $this->container['evaluation_deletion'] = $evaluation_deletion;

        return $this;
    }

    /**
     * Gets transcription_creation
     *
     * @return bool
     */
    public function getTranscriptionCreation()
    {
        return $this->container['transcription_creation'];
    }

    /**
     * Sets transcription_creation
     *
     * @param bool $transcription_creation transcription_creation
     *
     * @return $this
     */
    public function setTranscriptionCreation($transcription_creation)
    {
        $this->container['transcription_creation'] = $transcription_creation;

        return $this;
    }

    /**
     * Gets transcription_processing
     *
     * @return bool
     */
    public function getTranscriptionProcessing()
    {
        return $this->container['transcription_processing'];
    }

    /**
     * Sets transcription_processing
     *
     * @param bool $transcription_processing transcription_processing
     *
     * @return $this
     */
    public function setTranscriptionProcessing($transcription_processing)
    {
        $this->container['transcription_processing'] = $transcription_processing;

        return $this;
    }

    /**
     * Gets transcription_completion
     *
     * @return bool
     */
    public function getTranscriptionCompletion()
    {
        return $this->container['transcription_completion'];
    }

    /**
     * Sets transcription_completion
     *
     * @param bool $transcription_completion transcription_completion
     *
     * @return $this
     */
    public function setTranscriptionCompletion($transcription_completion)
    {
        $this->container['transcription_completion'] = $transcription_completion;

        return $this;
    }

    /**
     * Gets transcription_deletion
     *
     * @return bool
     */
    public function getTranscriptionDeletion()
    {
        return $this->container['transcription_deletion'];
    }

    /**
     * Sets transcription_deletion
     *
     * @param bool $transcription_deletion transcription_deletion
     *
     * @return $this
     */
    public function setTranscriptionDeletion($transcription_deletion)
    {
        $this->container['transcription_deletion'] = $transcription_deletion;

        return $this;
    }

    /**
     * Gets endpoint_creation
     *
     * @return bool
     */
    public function getEndpointCreation()
    {
        return $this->container['endpoint_creation'];
    }

    /**
     * Sets endpoint_creation
     *
     * @param bool $endpoint_creation endpoint_creation
     *
     * @return $this
     */
    public function setEndpointCreation($endpoint_creation)
    {
        $this->container['endpoint_creation'] = $endpoint_creation;

        return $this;
    }

    /**
     * Gets endpoint_processing
     *
     * @return bool
     */
    public function getEndpointProcessing()
    {
        return $this->container['endpoint_processing'];
    }

    /**
     * Sets endpoint_processing
     *
     * @param bool $endpoint_processing endpoint_processing
     *
     * @return $this
     */
    public function setEndpointProcessing($endpoint_processing)
    {
        $this->container['endpoint_processing'] = $endpoint_processing;

        return $this;
    }

    /**
     * Gets endpoint_completion
     *
     * @return bool
     */
    public function getEndpointCompletion()
    {
        return $this->container['endpoint_completion'];
    }

    /**
     * Sets endpoint_completion
     *
     * @param bool $endpoint_completion endpoint_completion
     *
     * @return $this
     */
    public function setEndpointCompletion($endpoint_completion)
    {
        $this->container['endpoint_completion'] = $endpoint_completion;

        return $this;
    }

    /**
     * Gets endpoint_deletion
     *
     * @return bool
     */
    public function getEndpointDeletion()
    {
        return $this->container['endpoint_deletion'];
    }

    /**
     * Sets endpoint_deletion
     *
     * @param bool $endpoint_deletion endpoint_deletion
     *
     * @return $this
     */
    public function setEndpointDeletion($endpoint_deletion)
    {
        $this->container['endpoint_deletion'] = $endpoint_deletion;

        return $this;
    }

    /**
     * Gets ping
     *
     * @return bool
     */
    public function getPing()
    {
        return $this->container['ping'];
    }

    /**
     * Sets ping
     *
     * @param bool $ping ping
     *
     * @return $this
     */
    public function setPing($ping)
    {
        $this->container['ping'] = $ping;

        return $this;
    }

    /**
     * Gets challenge
     *
     * @return bool
     */
    public function getChallenge()
    {
        return $this->container['challenge'];
    }

    /**
     * Sets challenge
     *
     * @param bool $challenge challenge
     *
     * @return $this
     */
    public function setChallenge($challenge)
    {
        $this->container['challenge'] = $challenge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


