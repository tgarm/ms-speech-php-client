<?php
/**
 * SharedModelFeatures
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Speech Services API v3.1
 *
 * Speech Services API v3.1.
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SharedModelFeatures Class Doc Comment
 *
 * @category Class
 * @description Features supported by the model.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SharedModelFeatures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SharedModelFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'supports_transcriptions' => 'bool',
        'supports_endpoints' => 'bool',
        'supports_transcriptions_on_speech_containers' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'supports_transcriptions' => null,
        'supports_endpoints' => null,
        'supports_transcriptions_on_speech_containers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supports_transcriptions' => 'supportsTranscriptions',
        'supports_endpoints' => 'supportsEndpoints',
        'supports_transcriptions_on_speech_containers' => 'supportsTranscriptionsOnSpeechContainers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supports_transcriptions' => 'setSupportsTranscriptions',
        'supports_endpoints' => 'setSupportsEndpoints',
        'supports_transcriptions_on_speech_containers' => 'setSupportsTranscriptionsOnSpeechContainers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supports_transcriptions' => 'getSupportsTranscriptions',
        'supports_endpoints' => 'getSupportsEndpoints',
        'supports_transcriptions_on_speech_containers' => 'getSupportsTranscriptionsOnSpeechContainers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['supports_transcriptions'] = isset($data['supports_transcriptions']) ? $data['supports_transcriptions'] : null;
        $this->container['supports_endpoints'] = isset($data['supports_endpoints']) ? $data['supports_endpoints'] : null;
        $this->container['supports_transcriptions_on_speech_containers'] = isset($data['supports_transcriptions_on_speech_containers']) ? $data['supports_transcriptions_on_speech_containers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supports_transcriptions
     *
     * @return bool
     */
    public function getSupportsTranscriptions()
    {
        return $this->container['supports_transcriptions'];
    }

    /**
     * Sets supports_transcriptions
     *
     * @param bool $supports_transcriptions A value indicating whether batch transcription is supported.
     *
     * @return $this
     */
    public function setSupportsTranscriptions($supports_transcriptions)
    {
        $this->container['supports_transcriptions'] = $supports_transcriptions;

        return $this;
    }

    /**
     * Gets supports_endpoints
     *
     * @return bool
     */
    public function getSupportsEndpoints()
    {
        return $this->container['supports_endpoints'];
    }

    /**
     * Sets supports_endpoints
     *
     * @param bool $supports_endpoints A value indicating whether creation of endpoints for live transcription is supported.
     *
     * @return $this
     */
    public function setSupportsEndpoints($supports_endpoints)
    {
        $this->container['supports_endpoints'] = $supports_endpoints;

        return $this;
    }

    /**
     * Gets supports_transcriptions_on_speech_containers
     *
     * @return bool
     */
    public function getSupportsTranscriptionsOnSpeechContainers()
    {
        return $this->container['supports_transcriptions_on_speech_containers'];
    }

    /**
     * Sets supports_transcriptions_on_speech_containers
     *
     * @param bool $supports_transcriptions_on_speech_containers A value indicating whether this model can be used for transcription on speech container. This feature can be added on existing models when it becomes usable on speech container.
     *
     * @return $this
     */
    public function setSupportsTranscriptionsOnSpeechContainers($supports_transcriptions_on_speech_containers)
    {
        $this->container['supports_transcriptions_on_speech_containers'] = $supports_transcriptions_on_speech_containers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


