<?php
/**
 * TranscriptionProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Speech Services API v3.1
 *
 * Speech Services API v3.1.
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TranscriptionProperties Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TranscriptionProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TranscriptionProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'diarization_enabled' => 'bool',
        'word_level_timestamps_enabled' => 'bool',
        'display_form_word_level_timestamps_enabled' => 'bool',
        'duration' => 'string',
        'channels' => 'int[]',
        'destination_container_url' => 'string',
        'punctuation_mode' => '\Swagger\Client\Model\PunctuationMode',
        'profanity_filter_mode' => '\Swagger\Client\Model\ProfanityFilterMode',
        'time_to_live' => 'string',
        'diarization' => '\Swagger\Client\Model\DiarizationProperties',
        'language_identification' => '\Swagger\Client\Model\LanguageIdentificationProperties',
        'email' => 'string',
        'error' => '\Swagger\Client\Model\EntityError'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'diarization_enabled' => null,
        'word_level_timestamps_enabled' => null,
        'display_form_word_level_timestamps_enabled' => null,
        'duration' => null,
        'channels' => 'int32',
        'destination_container_url' => 'uri',
        'punctuation_mode' => null,
        'profanity_filter_mode' => null,
        'time_to_live' => null,
        'diarization' => null,
        'language_identification' => null,
        'email' => null,
        'error' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'diarization_enabled' => 'diarizationEnabled',
        'word_level_timestamps_enabled' => 'wordLevelTimestampsEnabled',
        'display_form_word_level_timestamps_enabled' => 'displayFormWordLevelTimestampsEnabled',
        'duration' => 'duration',
        'channels' => 'channels',
        'destination_container_url' => 'destinationContainerUrl',
        'punctuation_mode' => 'punctuationMode',
        'profanity_filter_mode' => 'profanityFilterMode',
        'time_to_live' => 'timeToLive',
        'diarization' => 'diarization',
        'language_identification' => 'languageIdentification',
        'email' => 'email',
        'error' => 'error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'diarization_enabled' => 'setDiarizationEnabled',
        'word_level_timestamps_enabled' => 'setWordLevelTimestampsEnabled',
        'display_form_word_level_timestamps_enabled' => 'setDisplayFormWordLevelTimestampsEnabled',
        'duration' => 'setDuration',
        'channels' => 'setChannels',
        'destination_container_url' => 'setDestinationContainerUrl',
        'punctuation_mode' => 'setPunctuationMode',
        'profanity_filter_mode' => 'setProfanityFilterMode',
        'time_to_live' => 'setTimeToLive',
        'diarization' => 'setDiarization',
        'language_identification' => 'setLanguageIdentification',
        'email' => 'setEmail',
        'error' => 'setError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'diarization_enabled' => 'getDiarizationEnabled',
        'word_level_timestamps_enabled' => 'getWordLevelTimestampsEnabled',
        'display_form_word_level_timestamps_enabled' => 'getDisplayFormWordLevelTimestampsEnabled',
        'duration' => 'getDuration',
        'channels' => 'getChannels',
        'destination_container_url' => 'getDestinationContainerUrl',
        'punctuation_mode' => 'getPunctuationMode',
        'profanity_filter_mode' => 'getProfanityFilterMode',
        'time_to_live' => 'getTimeToLive',
        'diarization' => 'getDiarization',
        'language_identification' => 'getLanguageIdentification',
        'email' => 'getEmail',
        'error' => 'getError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['diarization_enabled'] = isset($data['diarization_enabled']) ? $data['diarization_enabled'] : null;
        $this->container['word_level_timestamps_enabled'] = isset($data['word_level_timestamps_enabled']) ? $data['word_level_timestamps_enabled'] : null;
        $this->container['display_form_word_level_timestamps_enabled'] = isset($data['display_form_word_level_timestamps_enabled']) ? $data['display_form_word_level_timestamps_enabled'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['destination_container_url'] = isset($data['destination_container_url']) ? $data['destination_container_url'] : null;
        $this->container['punctuation_mode'] = isset($data['punctuation_mode']) ? $data['punctuation_mode'] : null;
        $this->container['profanity_filter_mode'] = isset($data['profanity_filter_mode']) ? $data['profanity_filter_mode'] : null;
        $this->container['time_to_live'] = isset($data['time_to_live']) ? $data['time_to_live'] : null;
        $this->container['diarization'] = isset($data['diarization']) ? $data['diarization'] : null;
        $this->container['language_identification'] = isset($data['language_identification']) ? $data['language_identification'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets diarization_enabled
     *
     * @return bool
     */
    public function getDiarizationEnabled()
    {
        return $this->container['diarization_enabled'];
    }

    /**
     * Sets diarization_enabled
     *
     * @param bool $diarization_enabled A value indicating whether diarization (speaker identification) is requested. The default value  is `false`.  If this field is set to true and the improved diarization system is configured by specifying  `DiarizationProperties`, the improved diarization system will provide diarization for a configurable  range of speakers.  If this field is set to true and the improved diarization system is not enabled (not specifying  `DiarizationProperties`), the basic diarization system will distinguish between up to two speakers.  No extra charges are applied for the basic diarization.                The basic diarization system is deprecated and will be removed in the next major version of the API.  This `diarizationEnabled` setting will also be removed.
     *
     * @return $this
     */
    public function setDiarizationEnabled($diarization_enabled)
    {
        $this->container['diarization_enabled'] = $diarization_enabled;

        return $this;
    }

    /**
     * Gets word_level_timestamps_enabled
     *
     * @return bool
     */
    public function getWordLevelTimestampsEnabled()
    {
        return $this->container['word_level_timestamps_enabled'];
    }

    /**
     * Sets word_level_timestamps_enabled
     *
     * @param bool $word_level_timestamps_enabled A value indicating whether word level timestamps are requested. The default value is  `false`.
     *
     * @return $this
     */
    public function setWordLevelTimestampsEnabled($word_level_timestamps_enabled)
    {
        $this->container['word_level_timestamps_enabled'] = $word_level_timestamps_enabled;

        return $this;
    }

    /**
     * Gets display_form_word_level_timestamps_enabled
     *
     * @return bool
     */
    public function getDisplayFormWordLevelTimestampsEnabled()
    {
        return $this->container['display_form_word_level_timestamps_enabled'];
    }

    /**
     * Sets display_form_word_level_timestamps_enabled
     *
     * @param bool $display_form_word_level_timestamps_enabled A value indicating whether word level timestamps for the display form are requested. The default value is `false`.
     *
     * @return $this
     */
    public function setDisplayFormWordLevelTimestampsEnabled($display_form_word_level_timestamps_enabled)
    {
        $this->container['display_form_word_level_timestamps_enabled'] = $display_form_word_level_timestamps_enabled;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration The duration of the transcription. The duration is encoded as ISO 8601 duration  (\"PnYnMnDTnHnMnS\", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return int[]
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param int[] $channels A collection of the requested channel numbers.  In the default case, the channels 0 and 1 are considered.
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets destination_container_url
     *
     * @return string
     */
    public function getDestinationContainerUrl()
    {
        return $this->container['destination_container_url'];
    }

    /**
     * Sets destination_container_url
     *
     * @param string $destination_container_url The requested destination container.  ### Remarks ###  When a destination container is used in combination with a `timeToLive`, the metadata of a  transcription will be deleted normally, but the data stored in the destination container, including  transcription results, will remain untouched, because no delete permissions are required for this  container.<br />  To support automatic cleanup, either configure blob lifetimes on the container, or use \"Bring your own Storage (BYOS)\"  instead of `destinationContainerUrl`, where blobs can be cleaned up.
     *
     * @return $this
     */
    public function setDestinationContainerUrl($destination_container_url)
    {
        $this->container['destination_container_url'] = $destination_container_url;

        return $this;
    }

    /**
     * Gets punctuation_mode
     *
     * @return \Swagger\Client\Model\PunctuationMode
     */
    public function getPunctuationMode()
    {
        return $this->container['punctuation_mode'];
    }

    /**
     * Sets punctuation_mode
     *
     * @param \Swagger\Client\Model\PunctuationMode $punctuation_mode punctuation_mode
     *
     * @return $this
     */
    public function setPunctuationMode($punctuation_mode)
    {
        $this->container['punctuation_mode'] = $punctuation_mode;

        return $this;
    }

    /**
     * Gets profanity_filter_mode
     *
     * @return \Swagger\Client\Model\ProfanityFilterMode
     */
    public function getProfanityFilterMode()
    {
        return $this->container['profanity_filter_mode'];
    }

    /**
     * Sets profanity_filter_mode
     *
     * @param \Swagger\Client\Model\ProfanityFilterMode $profanity_filter_mode profanity_filter_mode
     *
     * @return $this
     */
    public function setProfanityFilterMode($profanity_filter_mode)
    {
        $this->container['profanity_filter_mode'] = $profanity_filter_mode;

        return $this;
    }

    /**
     * Gets time_to_live
     *
     * @return string
     */
    public function getTimeToLive()
    {
        return $this->container['time_to_live'];
    }

    /**
     * Sets time_to_live
     *
     * @param string $time_to_live How long the transcription will be kept in the system after it has completed. Once the  transcription reaches the time to live after completion (successful or failed) it will be automatically  deleted. Not setting this value or setting it to 0 will disable automatic deletion. The longest supported  duration is 31 days.  The duration is encoded as ISO 8601 duration (\"PnYnMnDTnHnMnS\", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
     *
     * @return $this
     */
    public function setTimeToLive($time_to_live)
    {
        $this->container['time_to_live'] = $time_to_live;

        return $this;
    }

    /**
     * Gets diarization
     *
     * @return \Swagger\Client\Model\DiarizationProperties
     */
    public function getDiarization()
    {
        return $this->container['diarization'];
    }

    /**
     * Sets diarization
     *
     * @param \Swagger\Client\Model\DiarizationProperties $diarization diarization
     *
     * @return $this
     */
    public function setDiarization($diarization)
    {
        $this->container['diarization'] = $diarization;

        return $this;
    }

    /**
     * Gets language_identification
     *
     * @return \Swagger\Client\Model\LanguageIdentificationProperties
     */
    public function getLanguageIdentification()
    {
        return $this->container['language_identification'];
    }

    /**
     * Sets language_identification
     *
     * @param \Swagger\Client\Model\LanguageIdentificationProperties $language_identification language_identification
     *
     * @return $this
     */
    public function setLanguageIdentification($language_identification)
    {
        $this->container['language_identification'] = $language_identification;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address to send email notifications to in case the operation completes.  The value will be removed after successfully sending the email.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \Swagger\Client\Model\EntityError
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \Swagger\Client\Model\EntityError $error error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


