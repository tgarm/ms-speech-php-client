<?php
/**
 * EvaluationProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Speech Services API v3.1
 *
 * Speech Services API v3.1.
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EvaluationProperties Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvaluationProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EvaluationProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'word_error_rate2' => 'double',
        'word_error_rate1' => 'double',
        'sentence_error_rate2' => 'double',
        'sentence_count2' => 'int',
        'word_count2' => 'int',
        'correct_word_count2' => 'int',
        'word_substitution_count2' => 'int',
        'word_deletion_count2' => 'int',
        'word_insertion_count2' => 'int',
        'sentence_error_rate1' => 'double',
        'sentence_count1' => 'int',
        'word_count1' => 'int',
        'correct_word_count1' => 'int',
        'word_substitution_count1' => 'int',
        'word_deletion_count1' => 'int',
        'word_insertion_count1' => 'int',
        'email' => 'string',
        'error' => '\Swagger\Client\Model\EntityError'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'word_error_rate2' => 'double',
        'word_error_rate1' => 'double',
        'sentence_error_rate2' => 'double',
        'sentence_count2' => 'int32',
        'word_count2' => 'int32',
        'correct_word_count2' => 'int32',
        'word_substitution_count2' => 'int32',
        'word_deletion_count2' => 'int32',
        'word_insertion_count2' => 'int32',
        'sentence_error_rate1' => 'double',
        'sentence_count1' => 'int32',
        'word_count1' => 'int32',
        'correct_word_count1' => 'int32',
        'word_substitution_count1' => 'int32',
        'word_deletion_count1' => 'int32',
        'word_insertion_count1' => 'int32',
        'email' => null,
        'error' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'word_error_rate2' => 'wordErrorRate2',
        'word_error_rate1' => 'wordErrorRate1',
        'sentence_error_rate2' => 'sentenceErrorRate2',
        'sentence_count2' => 'sentenceCount2',
        'word_count2' => 'wordCount2',
        'correct_word_count2' => 'correctWordCount2',
        'word_substitution_count2' => 'wordSubstitutionCount2',
        'word_deletion_count2' => 'wordDeletionCount2',
        'word_insertion_count2' => 'wordInsertionCount2',
        'sentence_error_rate1' => 'sentenceErrorRate1',
        'sentence_count1' => 'sentenceCount1',
        'word_count1' => 'wordCount1',
        'correct_word_count1' => 'correctWordCount1',
        'word_substitution_count1' => 'wordSubstitutionCount1',
        'word_deletion_count1' => 'wordDeletionCount1',
        'word_insertion_count1' => 'wordInsertionCount1',
        'email' => 'email',
        'error' => 'error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'word_error_rate2' => 'setWordErrorRate2',
        'word_error_rate1' => 'setWordErrorRate1',
        'sentence_error_rate2' => 'setSentenceErrorRate2',
        'sentence_count2' => 'setSentenceCount2',
        'word_count2' => 'setWordCount2',
        'correct_word_count2' => 'setCorrectWordCount2',
        'word_substitution_count2' => 'setWordSubstitutionCount2',
        'word_deletion_count2' => 'setWordDeletionCount2',
        'word_insertion_count2' => 'setWordInsertionCount2',
        'sentence_error_rate1' => 'setSentenceErrorRate1',
        'sentence_count1' => 'setSentenceCount1',
        'word_count1' => 'setWordCount1',
        'correct_word_count1' => 'setCorrectWordCount1',
        'word_substitution_count1' => 'setWordSubstitutionCount1',
        'word_deletion_count1' => 'setWordDeletionCount1',
        'word_insertion_count1' => 'setWordInsertionCount1',
        'email' => 'setEmail',
        'error' => 'setError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'word_error_rate2' => 'getWordErrorRate2',
        'word_error_rate1' => 'getWordErrorRate1',
        'sentence_error_rate2' => 'getSentenceErrorRate2',
        'sentence_count2' => 'getSentenceCount2',
        'word_count2' => 'getWordCount2',
        'correct_word_count2' => 'getCorrectWordCount2',
        'word_substitution_count2' => 'getWordSubstitutionCount2',
        'word_deletion_count2' => 'getWordDeletionCount2',
        'word_insertion_count2' => 'getWordInsertionCount2',
        'sentence_error_rate1' => 'getSentenceErrorRate1',
        'sentence_count1' => 'getSentenceCount1',
        'word_count1' => 'getWordCount1',
        'correct_word_count1' => 'getCorrectWordCount1',
        'word_substitution_count1' => 'getWordSubstitutionCount1',
        'word_deletion_count1' => 'getWordDeletionCount1',
        'word_insertion_count1' => 'getWordInsertionCount1',
        'email' => 'getEmail',
        'error' => 'getError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['word_error_rate2'] = isset($data['word_error_rate2']) ? $data['word_error_rate2'] : null;
        $this->container['word_error_rate1'] = isset($data['word_error_rate1']) ? $data['word_error_rate1'] : null;
        $this->container['sentence_error_rate2'] = isset($data['sentence_error_rate2']) ? $data['sentence_error_rate2'] : null;
        $this->container['sentence_count2'] = isset($data['sentence_count2']) ? $data['sentence_count2'] : null;
        $this->container['word_count2'] = isset($data['word_count2']) ? $data['word_count2'] : null;
        $this->container['correct_word_count2'] = isset($data['correct_word_count2']) ? $data['correct_word_count2'] : null;
        $this->container['word_substitution_count2'] = isset($data['word_substitution_count2']) ? $data['word_substitution_count2'] : null;
        $this->container['word_deletion_count2'] = isset($data['word_deletion_count2']) ? $data['word_deletion_count2'] : null;
        $this->container['word_insertion_count2'] = isset($data['word_insertion_count2']) ? $data['word_insertion_count2'] : null;
        $this->container['sentence_error_rate1'] = isset($data['sentence_error_rate1']) ? $data['sentence_error_rate1'] : null;
        $this->container['sentence_count1'] = isset($data['sentence_count1']) ? $data['sentence_count1'] : null;
        $this->container['word_count1'] = isset($data['word_count1']) ? $data['word_count1'] : null;
        $this->container['correct_word_count1'] = isset($data['correct_word_count1']) ? $data['correct_word_count1'] : null;
        $this->container['word_substitution_count1'] = isset($data['word_substitution_count1']) ? $data['word_substitution_count1'] : null;
        $this->container['word_deletion_count1'] = isset($data['word_deletion_count1']) ? $data['word_deletion_count1'] : null;
        $this->container['word_insertion_count1'] = isset($data['word_insertion_count1']) ? $data['word_insertion_count1'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets word_error_rate2
     *
     * @return double
     */
    public function getWordErrorRate2()
    {
        return $this->container['word_error_rate2'];
    }

    /**
     * Sets word_error_rate2
     *
     * @param double $word_error_rate2 The word error rate of recognition with model2.
     *
     * @return $this
     */
    public function setWordErrorRate2($word_error_rate2)
    {
        $this->container['word_error_rate2'] = $word_error_rate2;

        return $this;
    }

    /**
     * Gets word_error_rate1
     *
     * @return double
     */
    public function getWordErrorRate1()
    {
        return $this->container['word_error_rate1'];
    }

    /**
     * Sets word_error_rate1
     *
     * @param double $word_error_rate1 The word error rate of recognition with model1.
     *
     * @return $this
     */
    public function setWordErrorRate1($word_error_rate1)
    {
        $this->container['word_error_rate1'] = $word_error_rate1;

        return $this;
    }

    /**
     * Gets sentence_error_rate2
     *
     * @return double
     */
    public function getSentenceErrorRate2()
    {
        return $this->container['sentence_error_rate2'];
    }

    /**
     * Sets sentence_error_rate2
     *
     * @param double $sentence_error_rate2 The sentence error rate of recognition with model2.
     *
     * @return $this
     */
    public function setSentenceErrorRate2($sentence_error_rate2)
    {
        $this->container['sentence_error_rate2'] = $sentence_error_rate2;

        return $this;
    }

    /**
     * Gets sentence_count2
     *
     * @return int
     */
    public function getSentenceCount2()
    {
        return $this->container['sentence_count2'];
    }

    /**
     * Sets sentence_count2
     *
     * @param int $sentence_count2 The number of processed sentences by model2.
     *
     * @return $this
     */
    public function setSentenceCount2($sentence_count2)
    {
        $this->container['sentence_count2'] = $sentence_count2;

        return $this;
    }

    /**
     * Gets word_count2
     *
     * @return int
     */
    public function getWordCount2()
    {
        return $this->container['word_count2'];
    }

    /**
     * Sets word_count2
     *
     * @param int $word_count2 The number of processed words by model2.
     *
     * @return $this
     */
    public function setWordCount2($word_count2)
    {
        $this->container['word_count2'] = $word_count2;

        return $this;
    }

    /**
     * Gets correct_word_count2
     *
     * @return int
     */
    public function getCorrectWordCount2()
    {
        return $this->container['correct_word_count2'];
    }

    /**
     * Sets correct_word_count2
     *
     * @param int $correct_word_count2 The number of correctly recognized words by model2.
     *
     * @return $this
     */
    public function setCorrectWordCount2($correct_word_count2)
    {
        $this->container['correct_word_count2'] = $correct_word_count2;

        return $this;
    }

    /**
     * Gets word_substitution_count2
     *
     * @return int
     */
    public function getWordSubstitutionCount2()
    {
        return $this->container['word_substitution_count2'];
    }

    /**
     * Sets word_substitution_count2
     *
     * @param int $word_substitution_count2 The number of recognized words by model2, that are substitutions.
     *
     * @return $this
     */
    public function setWordSubstitutionCount2($word_substitution_count2)
    {
        $this->container['word_substitution_count2'] = $word_substitution_count2;

        return $this;
    }

    /**
     * Gets word_deletion_count2
     *
     * @return int
     */
    public function getWordDeletionCount2()
    {
        return $this->container['word_deletion_count2'];
    }

    /**
     * Sets word_deletion_count2
     *
     * @param int $word_deletion_count2 The number of recognized words by model2, that are deletions.
     *
     * @return $this
     */
    public function setWordDeletionCount2($word_deletion_count2)
    {
        $this->container['word_deletion_count2'] = $word_deletion_count2;

        return $this;
    }

    /**
     * Gets word_insertion_count2
     *
     * @return int
     */
    public function getWordInsertionCount2()
    {
        return $this->container['word_insertion_count2'];
    }

    /**
     * Sets word_insertion_count2
     *
     * @param int $word_insertion_count2 The number of recognized words by model2, that are insertions.
     *
     * @return $this
     */
    public function setWordInsertionCount2($word_insertion_count2)
    {
        $this->container['word_insertion_count2'] = $word_insertion_count2;

        return $this;
    }

    /**
     * Gets sentence_error_rate1
     *
     * @return double
     */
    public function getSentenceErrorRate1()
    {
        return $this->container['sentence_error_rate1'];
    }

    /**
     * Sets sentence_error_rate1
     *
     * @param double $sentence_error_rate1 The sentence error rate of recognition with model1.
     *
     * @return $this
     */
    public function setSentenceErrorRate1($sentence_error_rate1)
    {
        $this->container['sentence_error_rate1'] = $sentence_error_rate1;

        return $this;
    }

    /**
     * Gets sentence_count1
     *
     * @return int
     */
    public function getSentenceCount1()
    {
        return $this->container['sentence_count1'];
    }

    /**
     * Sets sentence_count1
     *
     * @param int $sentence_count1 The number of processed sentences by model1.
     *
     * @return $this
     */
    public function setSentenceCount1($sentence_count1)
    {
        $this->container['sentence_count1'] = $sentence_count1;

        return $this;
    }

    /**
     * Gets word_count1
     *
     * @return int
     */
    public function getWordCount1()
    {
        return $this->container['word_count1'];
    }

    /**
     * Sets word_count1
     *
     * @param int $word_count1 The number of processed words by model1.
     *
     * @return $this
     */
    public function setWordCount1($word_count1)
    {
        $this->container['word_count1'] = $word_count1;

        return $this;
    }

    /**
     * Gets correct_word_count1
     *
     * @return int
     */
    public function getCorrectWordCount1()
    {
        return $this->container['correct_word_count1'];
    }

    /**
     * Sets correct_word_count1
     *
     * @param int $correct_word_count1 The number of correctly recognized words by model1.
     *
     * @return $this
     */
    public function setCorrectWordCount1($correct_word_count1)
    {
        $this->container['correct_word_count1'] = $correct_word_count1;

        return $this;
    }

    /**
     * Gets word_substitution_count1
     *
     * @return int
     */
    public function getWordSubstitutionCount1()
    {
        return $this->container['word_substitution_count1'];
    }

    /**
     * Sets word_substitution_count1
     *
     * @param int $word_substitution_count1 The number of recognized words by model1, that are substitutions.
     *
     * @return $this
     */
    public function setWordSubstitutionCount1($word_substitution_count1)
    {
        $this->container['word_substitution_count1'] = $word_substitution_count1;

        return $this;
    }

    /**
     * Gets word_deletion_count1
     *
     * @return int
     */
    public function getWordDeletionCount1()
    {
        return $this->container['word_deletion_count1'];
    }

    /**
     * Sets word_deletion_count1
     *
     * @param int $word_deletion_count1 The number of recognized words by model1, that are deletions.
     *
     * @return $this
     */
    public function setWordDeletionCount1($word_deletion_count1)
    {
        $this->container['word_deletion_count1'] = $word_deletion_count1;

        return $this;
    }

    /**
     * Gets word_insertion_count1
     *
     * @return int
     */
    public function getWordInsertionCount1()
    {
        return $this->container['word_insertion_count1'];
    }

    /**
     * Sets word_insertion_count1
     *
     * @param int $word_insertion_count1 The number of recognized words by model1, that are insertions.
     *
     * @return $this
     */
    public function setWordInsertionCount1($word_insertion_count1)
    {
        $this->container['word_insertion_count1'] = $word_insertion_count1;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address to send email notifications to in case the operation completes.  The value will be removed after successfully sending the email.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \Swagger\Client\Model\EntityError
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \Swagger\Client\Model\EntityError $error error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


